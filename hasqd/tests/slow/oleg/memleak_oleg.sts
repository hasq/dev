#!/bin/sh

PORT1=14001
PORT2=14002
IP=127.0.0.1
PIDFILE1=hq.$PORT1.lock
PIDFILE2=hq.$PORT2.lock
LOGFILE=memleak.txt
INPFILE=memleak_oleg.inp
DPRNSTATUS=1
DSVTSTATUS=1

#	Find the "addr = [ IPADDRESS:PORT ]" and change it to "addr = [ $IP:$PORT1 ]"
sed -i '0,/addr \=/s/^addr.*/addr \= \[ '$IP:$PORT1' \]/g' $INPFILE

# 	TIME0 can be ONLY "m" for minutes îr "s" for seconds. If we choose "s", then INTERVAL will be calculated in seconds and TIME_LIMIT_H in minutes (its for debug)
TIME0=m

#	Timelimit of test in minutes or hours - it depends on the value of TIME0
TIME_LIMIT_H=24
TIME_LIMIT_M=$(($TIME_LIMIT_H * 60))

#	Intervals in minutes or seconds - it depends on the value of TIME0
INTERVAL=15



###########################################################################################################


if [ $TIME0 != "m" -a $TIME0 != "s"  ] 
then 
	echo "Error: TIME0 must be ONLY \"m\" or \"s\""
	exit
fi

RUNTIME=0

[ -f $PIDFILE1 ] && rm -f $PIDFILE1
[ -f $PIDFILE2 ] && rm -f $PIDFILE2
[ -f $LOGFILE ] && rm -f $LOGFILE
[ -f $STOPFILE ] && rm -f $STOPFILE

uname | grep -i "CYGWIN" > /dev/null && PLAT="Windows" || PLAT="Linux"

printlog() {
	[ $PLAT = "Linux" ] && echo "	free memory is - $(free -k | grep "Mem:" | sed 's/ \+/\t/g' | cut -f 4) Kb" >> $LOGFILE || echo "	free memory is - $(cmd /c %systemroot%/system32/wbem/wmic.exe os get FreePhysicalMemory | grep -o '[0-9]*') Kb" >> $LOGFILE
}

echo "Current platform is ${PLAT} " >> $LOGFILE
echo "Startup time is `date +"%H:%M"`" >> $LOGFILE

[ $TIME0 = "m" ] && echo "Specified time is $TIME_LIMIT_H hours"  >> $LOGFILE || echo "Specified time is $TIME_LIMIT_H minutes"  >> $LOGFILE
[ $TIME0 = "m" ] && echo "Collection interval is $INTERVAL minutes"  >> $LOGFILE || echo "Collection interval is $INTERVAL seconds"  >> $LOGFILE

echo "HASQD#1 was started on $PORT1" >> $LOGFILE
echo "HASQD#2 was started on $PORT2" >> $LOGFILE
echo ""  >> $LOGFILE
echo -n "`date +"%H:%M"`	-	before the start of test" >> $LOGFILE

printlog

#$1/zdb erasedisk "create _md5 md5 MD5 1 [abc] 1 0" "create _s22 s22 SHA2-256 1 [abc] 1 0"

#$1/hasqd -clq quit=1 lock=1 tcp_port=$PORT1 > /dev/null &

$1/hasqd -clq quit=1 s=$INPFILE lock=1 dprn=$DPRNSTATUS dsvt=$DSVTSTATUS tcp_port=$PORT2 net_conntime=5500 net_readtime=5500 &

#	Waiting until the HASQD-server #1 creates a lock file

until [ -f $PIDFILE1 ]
do 
	echo > /dev/null
done

#	The loop runs while there is a lock file of HASQD Server #1 or time is done
while [ -f $PIDFILE1 ]
do
	if [ $RUNTIME -ge $TIME_LIMIT_M ]
	then
		[ $TIME0 = "m" ] && echo -n "`date +"%H:%M"`	-	$RUNTIME	minutes past,	" >> $LOGFILE || echo -n "`date +"%H:%M"`	-	$RUNTIME seconds past,	" >> $LOGFILE
		printlog
		PID1=$(cat $PIDFILE1)
		PID2=$(cat $PIDFILE2)
		[ $PLAT = "Linux" ] && kill -9 $PID2 $PID1 > /dev/null
		[ $PLAT = "Windows" ] && taskkill /f /PID $PID2 /PID $PID1 >nul
		break
	else
		[ $TIME0 = "m" ] && echo -n "`date +"%H:%M"`	-	$RUNTIME	minutes past,	" >> $LOGFILE || echo -n "`date +"%H:%M"`	-	$RUNTIME seconds past,	" >> $LOGFILE
		printlog
		RUNTIME=$(($RUNTIME + $INTERVAL))
		sleep $INTERVAL$TIME0
	fi
done
wait
echo -n "`date +"%H:%M"`	-	after the end of test	" >> $LOGFILE
printlog
[ -f $PIDFILE1 ] && rm -f $PIDFILE1
[ -f $PIDFILE2 ] && rm -f $PIDFILE2
[ -f $STOPFILE ] && rm -f $STOPFILE

$1/zdb erasedisk
